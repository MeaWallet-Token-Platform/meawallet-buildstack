name: reusable-master-flow

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      build_command:
        required: true
        type: string
      artifacts_publish_command:
        required: false
        type: string
      registry_name:
        required: false
        type: string
      service_name: 
        required: false
        type: string
      app_name:
        required: false
        type: string
      deploy_repo:
        required: false
        type: string
      slack_channel_id:
        required: false
        type: string

    secrets:
      aws_ca_domain:
        description: 'AWS_CA_DOMAIN'
        required: false
      aws_ca_owner_id:
        description: 'AWS_CA_OWNER_ID'
        required: false
      aws_role_to_assume:
        description: 'AWS_ROLE_TO_ASSUME'
        required: false
      slack_webhook_url:
        description: 'SLACK_WEBHOOK_URL'
        required: false
      slack_channel_id:
        description: 'SLACK_CHANNEL_ID'
        required: false
      dockerhub_username:
        description: 'DOCKERHUB_USERNAME'
        required: false
      dockerhub_token: 
        description: 'DOCKERHUB_TOKEN'
        required: false
      cd_token:
        description: 'CD_TOKEN'
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  start-master-build:
    name: Start master build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.aws_role_to_assume }}
          aws-region: eu-central-1

      - name: Setup Docker Buildx
        if: ${{ inputs.registry_name !=0 }}
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: ${{ inputs.registry_name != 0 }}
        id: login-dockerhub
        uses: docker/login-action@v1 
        with: 
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}

      - name: Initialize variables
        id: vars
        run: |
          echo "::set-output name=run_url::https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Increment semantic version
        id: version
        uses: paulhatch/semantic-version@v4

      - name: Building project
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ inputs.build_command }} -PreleaseVersion=${{ steps.version.outputs.version }}

      - name: Publish Artifacts
        uses: gradle/gradle-build-action@v2
        if: ${{ success() && inputs.artifacts_publish_command != 0 }}
        with:
          arguments: ${{ inputs.artifacts_publish_command }} -PreleaseVersion=${{ steps.version.outputs.version }}

      - name: Login to Amazon ECR
        if: ${{ inputs.registry_name != 0 }}
        id: login-ecr
        uses: docker/login-action@v1
        with: 
          registry: ${{ inputs.registry_name }}

      - name: Build and push image to registry
        if: ${{ success() && inputs.registry_name != 0 }}
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          build-args: |
            APP_NAME=${{ inputs.app_name }}
            JVM_MIN=-Xms1024m
            JVM_MAX=-Xmx2048m
          tags: ${{ inputs.registry_name }}/${{ inputs.service_name }}:${{ steps.version.outputs.version_tag }},${{ inputs.registry_name }}/${{ inputs.service_name }}:latest

      - name: Create and push tags to origin
        if: ${{ success() && inputs.build_command != 0 }}
        run: |
          git tag ${{ steps.version.outputs.version_tag }}
          git push origin ${{ steps.version.outputs.version_tag }}

      - name: Dispatch deployment to the development 
        if: ${{ success() && inputs.service_name != 0 && inputs.deploy_repo != 0 }}
        uses: peter-evans/repository-dispatch@v2
        with: 
          token: ${{ secrets.cd_token }}
          event-type: dev-release
          client-payload: '{"service_name": "${{ inputs.service_name }}", "image_version": "${{ steps.version.outputs.version_tag }}"}'
          repository: ${{ inputs.deploy_repo }} 

      - name: Post to Slack channel
        if: ${{ failure() }}
        id: slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}
        uses: slackapi/slack-github-action@v1.18.0
        with: 
          payload: |
            {
              "status": "Build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "author": "Pull request author: ${{ github.event.pull_request.user.login }}"
            }
